# docker compose file for running a 3-node PostgreSQL cluster
# with 3-node etcd cluster as the DCS and one haproxy node
version: "2"

networks:
  demo:
    driver: bridge

services:
  etcd1: &etcd
    image: patroni
    networks: [ demo ]
    environment:
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_INITIAL_CLUSTER_TOKEN: tutorial
    container_name: demo-etcd1
    hostname: etcd1
    command: etcd -name etcd1 -initial-advertise-peer-urls http://etcd1:2380

  etcd2:
    <<: *etcd
    container_name: demo-etcd2
    hostname: etcd2
    command: etcd -name etcd2 -initial-advertise-peer-urls http://etcd2:2380

  etcd3:
    <<: *etcd
    container_name: demo-etcd3
    hostname: etcd3
    command: etcd -name etcd3 -initial-advertise-peer-urls http://etcd3:2380

  haproxy:
    image: patroni
    networks: [ demo ]
    env_file: docker/patroni.env
    hostname: haproxy
    container_name: demo-haproxy
    ports:
      - "5000:5000"
      - "5001:5001"
    command: haproxy
    environment: &haproxy_env
      ETCDCTL_ENDPOINTS: http://etcd1:2379,http://etcd2:2379,http://etcd3:2379
      PATRONI_ETCD3_HOSTS: "'etcd1:2379','etcd2:2379','etcd3:2379'"
      PATRONI_SCOPE: demo

  patroni1:
    image: patroni
    networks: [ demo ]
    env_file: docker/patroni.env
    hostname: patroni1
    container_name: demo-patroni1
    environment:
      <<: *haproxy_env
      PATRONI_NAME: patroni1

  patroni2:
    image: patroni
    networks: [ demo ]
    env_file: docker/patroni.env
    hostname: patroni2
    container_name: demo-patroni2
    environment:
      <<: *haproxy_env
      PATRONI_NAME: patroni2

  patroni3:
    image: patroni
    networks: [ demo ]
    env_file: docker/patroni.env
    hostname: patroni3
    container_name: demo-patroni3
    environment:
      <<: *haproxy_env
      PATRONI_NAME: patroni3

  billing:
    image: "tiangolo/uvicorn-gunicorn-fastapi:python3.8"
    container_name: billing
    hostname: billing
    command: bash -c "ls -la&&
      pip install poetry&&
      poetry config virtualenvs.create false&&
      poetry install --no-interaction --no-ansi --extras pgsql&&
      gunicorn app.main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000"

    ports:
      - "8000:8000"
    networks: [ demo ]
    environment:
      DATABASE_NAME: postgres
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_HOST: haproxy
      DATABASE_PORT: 5000
      BACKEND_CORS_ORIGINS: "*"
      PROJECT_NAME: "billing"
      ENVIRONMENT: docker
    volumes:
      - ../:/app/
